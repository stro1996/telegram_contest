{"version":3,"sources":["components/Field.js","utils/getValue.js","components/Chart.js","components/BottomCharts.js","components/Charts.js","components/BottomMeasure.js","components/Button.js","components/Tip.js","const/constFor–°alculations.js","utils/getCoefficient.js","App.js","utils/getValueOfRange.js","serviceWorker.js","index.js"],"names":["Field","_this$props","this","props","heightGap","width","maxValue","arrForRender","Math","floor","react_default","a","createElement","map","item","index","positionByY","Fragment","key","style","position","top","fontSize","react_lineto","borderColor","x0","y0","x1","y1","Component","getValue","indexOfChart","indexOfArray","indexElement","data","columns","getLengthOfArray","length","getFirstValueOfArrayOfDate","getMaxValueOFArrayOfDate","getColor","colors","getName","names","showTooltip","evt","cb","pageX","pageY","hideTooltip","Chart","arrOfLine","heightWithPadding","color","coefficientY","coefficientX","minValue","isCharts","renderDot","name","changeStateOfTip","resetIndex","_loop","i","targetValue","indexForRenderX","line","concat","stroke","strokeWidth","x2","y2","onTouchStart","onTouchEnd","onMouseMove","onMouseOut","fill","cx","cy","r","push","BottomCharts","state","update","getArrayOfLine","_this","arrayOfItems","arrayOfLine","dataIndex","components_Chart","nextProps","nextState","_this$props2","height","newArrayOfItems","newHeight","newWidth","resetAll","needUpdate","forEach","setState","Charts","month","BottomMeasure","step","delta","stepByDtae","Date","left","getMonth","getDate","getFullYear","Button","onPressOnButton","onPress","isCheck","marginLeft","borderRadius","outline","onClick","display","flexDirection","alignItems","fontWeight","getArrayOfItems","arrayOfValue","indexOfValue","newItem","margin","textAlign","Tip","show","positionX","positionOfTipY","date","zIndex","pointerEvents","toDateString","borderWidth","rangeForBottomBar","getMaxValueOfThisIndex","elementIndex","maxElementInRange","value","getCoefficientYForBottomBar","range","coefficient","checkMaxValue","calculateCoefficient","justifyContent","border","background","MainApp","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handelClickOnButton","newArray","toConsumableArray","arrayOfButton","requestAnimationFrame","onDrag","e","d","_this$state","limiter","newLimiter","objectSpread","newX","x","y","onResize","direction","ref","type","targetTouches","oldX","positionOfX","positionOfY","showTip","positionOfTipX","indexValueOnTip","isResizing","isDragging","updateWindowDimensions","bind","assertThisInitialized","_this2","match","params","window","addEventListener","nextContext","_this3","removeEventListener","innerHeight","innerWidth","startPosition","firstValue","_this4","_this$state2","heightWithPaddingForCharts","_getCoefficientX","maxQuantity","arrayLength","newMinValue","newMaxValue","stepOfValueX","getCoefficientX","_getValueXOfRange","minValueXOfRange","ceil","maxValueXOfRange","_getValueAndCoefficie","getValueAndCoefficientYForChart","coefficientForCharts","maxValueForCharts","coefficientXForCharts","getCoefficientXForCharts","heightWithPaddingForBottomBar","className","components_Field","components_BottomMeasure","components_Button","lib","dragAxis","size","backgroundColor","bottom","right","components_BottomCharts","components_Charts","components_Tip","Main","react_router_dom","to","App","basename","react_router","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bb6f171.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-lineto';\n\nclass Field extends Component {\n  render() {\n    const { heightGap, width , maxValue} = this.props;\n    const arrForRender = [\n      maxValue,\n      Math.floor(maxValue * 0.8),\n      Math.floor(maxValue * 0.6),\n      Math.floor(maxValue * 0.4),\n      Math.floor(maxValue * 0.2),\n      0\n    ];\n    return (\n      <div>\n        {\n          arrForRender.map((item, index) => {\n            const positionByY = heightGap * (index + 1);\n            return (\n              <React.Fragment key={index}>\n                <div style={{position: 'absolute', top: positionByY - 40}}>\n                  <p style={{fontSize: '1dp'}}>{item}</p>\n                </div>\n                <Line\n                  borderColor={'gray'}\n                  x0={0}\n                  y0={positionByY}\n                  x1={width}\n                  y1={positionByY}\n                />\n              </React.Fragment>\n            );\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default Field;\n","import data from \"../chart_data\";\n\nexport const getValue = (indexOfChart, indexOfArray, indexElement) => {\n  return data\n    && data[indexOfChart]\n    && data[indexOfChart].columns\n    && data[indexOfChart].columns[indexOfArray]\n    && data[indexOfChart].columns[indexOfArray][indexElement];\n};\n\nexport const getLengthOfArray = (index) => {\n  return data\n    && data[index]\n    && data[index].columns\n    && data[index].columns[0]\n    && data[index].columns[0].length;\n};\n\nexport const getChartsQantity = (index) => {\n  return data\n    && data[index]\n    && data[index].columns\n    && data[index].columns\n    && data[index].columns.length - 1;\n};\n\nexport const getFirstValueOfArrayOfDate = (index) => {\n  return data\n    && data[index]\n    && data[index].columns\n    && data[index].columns[0]\n    && data[index].columns[0][1];\n};\n\nexport const getMaxValueOFArrayOfDate = (index) => {\n  return data\n    && data[index]\n    && data[index].columns\n    && data[index].columns[0]\n    && data[index].columns[0][data[index].columns[0].length - 1];\n};\n\n\nexport const getColor = (index, key) => {\n  return data\n    && data[index]\n    && data[index].colors\n    && data[index].colors[key];\n};\n\nexport const getName = (index, key) => {\n  return data\n    && data[index]\n    && data[index].names\n    && data[index].names[key];\n};\n","import React from 'react';\nimport { getValue, getLengthOfArray } from '../utils/getValue';\n\nconst Chart = (props) => {\n  const arrOfLine = [];\n  const {\n    heightWithPadding,\n    index,\n    color,\n    coefficientY,\n    coefficientX,\n    minValue,\n    maxValue,\n    isCharts,\n    renderDot,\n    width,\n    name,\n    changeStateOfTip,\n    indexOfChart\n  } = props;\n  let resetIndex = 0;\n  for (let i = 0; i < getLengthOfArray(indexOfChart); i++) {\n\n    const targetValue = getValue(indexOfChart, 0, i);\n    if (i !== 0 && (targetValue > maxValue ||  targetValue < minValue)) {\n      resetIndex = i;\n      continue;\n    }\n\n    const indexForRenderX = isCharts ? (i - 1) - resetIndex : i;\n    if (i === getLengthOfArray(indexOfChart) - 1) {\n      continue\n    }\n\n    const line = (\n      <React.Fragment key={`${name}_${index}_${i}`}>\n        <line\n          stroke={color}\n          strokeWidth={2}\n          x1={i === 0 ? 0 : coefficientX * indexForRenderX}\n          y1={i === 0 ? heightWithPadding : heightWithPadding - (getValue(indexOfChart, index, i) / coefficientY)}\n          x2={coefficientX * indexForRenderX + coefficientX}\n          y2={heightWithPadding - ((getValue(indexOfChart,index, i + 1) / coefficientY))}\n        />\n        {\n          renderDot\n            ? <circle\n                onTouchStart={(evt) => showTooltip(evt, i , changeStateOfTip)}\n                onTouchEnd={() => hideTooltip(changeStateOfTip)}\n                onMouseMove={(evt) => showTooltip(evt, i, changeStateOfTip)}\n                onMouseOut={() => hideTooltip(changeStateOfTip)}\n                fill={'transparent'}\n                cx={i === 0 ? 0 : coefficientX * indexForRenderX}\n                cy={i === 0 ? heightWithPadding : heightWithPadding - (getValue(indexOfChart, index, i) / coefficientY)}\n                r={10}\n            />\n            : null\n        }\n      </React.Fragment>\n    );\n\n    arrOfLine.push(line);\n  }\n\n  return arrOfLine;\n};\n\nconst showTooltip = (evt, index, cb) => {\n  cb(true, evt.pageX, index, evt.pageY)\n};\n\nconst hideTooltip = (cb) => {\n  cb(false, 1, 1)\n};\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport { getColor } from '../utils/getValue';\nimport Chart from './Chart';\n\nclass BottomCharts extends Component {\n\n  state = {\n    update: false,\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { arrayOfItems, width, height } = this.props;\n    const { arrayOfItems: newArrayOfItems, height: newHeight, width: newWidth, resetAll } = nextProps;\n    const { update } = this.state;\n    let needUpdate = false;\n    if (resetAll) {\n      return true;\n    }\n    if (!update) {\n      return true;\n    }\n\n    if (width !== newWidth || height !== newHeight) {\n      return true\n    }\n\n    arrayOfItems.forEach((item, index) => {\n      if (item !== newArrayOfItems[index]) {\n        needUpdate = true;\n      }\n    });\n\n    return needUpdate;\n  }\n\n  componentDidMount() {\n    this.setState({ update: true });\n  }\n\n  getArrayOfLine = () => {\n    const { arrayOfItems, coefficientY, coefficientX, heightWithPadding, minValue, maxValue, indexOfChart } = this.props;\n    let arrayOfLine = [];\n    for (let dataIndex = 0; dataIndex < arrayOfItems.length; dataIndex++) {\n      if (arrayOfItems[dataIndex] === null) {\n        arrayOfLine.push(null);\n        continue;\n      }\n\n      arrayOfLine.push(<Chart\n        key={dataIndex}\n        index={dataIndex + 1}\n        color={getColor(indexOfChart, `y${dataIndex}`)}\n        coefficientY={coefficientY}\n        coefficientX={coefficientX}\n        minValue={minValue}\n        maxValue={maxValue}\n        heightWithPadding={heightWithPadding}\n        name={'BottomCharts'}\n        indexOfChart={indexOfChart}\n      />);\n    }\n\n    return arrayOfLine;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.getArrayOfLine()}\n      </React.Fragment>\n    );\n  };\n}\n\nexport default BottomCharts;\n","import React, { Component } from 'react';\nimport Chart from \"./Chart\";\nimport {getColor, getValue} from \"../utils/getValue\";\n\nclass Charts extends Component {\n\n  getArrayOfLine = () => {\n    const {\n      arrayOfItems,\n      coefficientY,\n      coefficientX,\n      height,\n      minValue,\n      maxValue,\n      heightWithPadding,\n      isCharts,\n      width,\n      changeStateOfTip,\n      indexOfChart,\n    } = this.props;\n    let arrayOfLine = [];\n    for (let dataIndex = 0; dataIndex < arrayOfItems.length; dataIndex++) {\n\n      if (arrayOfItems[dataIndex] === null) {\n        arrayOfLine.push(null);\n        continue;\n      }\n\n      const firstValue = getValue(indexOfChart, 0, 1);\n      if (firstValue > maxValue) {\n        continue;\n      }\n\n      arrayOfLine.push(<Chart\n        key={`Charts_${dataIndex}`}\n        height={height}\n        index={dataIndex + 1}\n        color={getColor(indexOfChart, `y${dataIndex}`)}\n        coefficientY={coefficientY}\n        coefficientX={coefficientX}\n        minValue={minValue}\n        maxValue={maxValue}\n        heightWithPadding={heightWithPadding}\n        isCharts={isCharts}\n        renderDot={true}\n        width={width}\n        changeStateOfTip={changeStateOfTip}\n        name={'Charts'}\n        indexOfChart={indexOfChart}\n      />);\n    }\n\n    return arrayOfLine;\n  };\n\n\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.getArrayOfLine()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Charts;\n","import React, { Component } from 'react';\n\nconst month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nclass BottomMeasure extends Component {\n  render() {\n    const { maxValue, step, positionByY, width, minValue, stepByDtae, delta } = this.props;\n    const arrForRender = [\n      new Date(minValue),\n      new Date(Math.floor(minValue + (delta * 0.2))),\n      new Date(Math.floor(minValue + (delta * 0.4))),\n      new Date(Math.floor(minValue + (delta * 0.6))),\n      new Date(Math.floor(minValue + (delta * 0.8))),\n      new Date(maxValue),\n    ];\n\n    return (\n      <div>\n        {\n          arrForRender.map((item, index) => {\n            const positionByX = step * (index );\n            const style = {\n                  position: 'absolute',\n                  top: positionByY,\n                  left: positionByX,\n                };\n            return (\n              <div style={style} key={index}>\n                <p style={{fontSize: '10px'}}>{`${month[item.getMonth()]} ${item.getDate()} ${item.getFullYear()}`}</p>\n              </div>\n            )\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default BottomMeasure;\n","import React, { Component } from 'react';\nimport { getColor, getName } from \"../utils/getValue\";\n\nclass Button extends Component {\n\n  onPressOnButton = () => {\n    const { index, onPress } = this.props;\n    onPress(index);\n  };\n\n  render() {\n    const { width, index, item, height } = this.props;\n    const color = getColor(4, `y${index}`);\n    const name = getName(4, `y${index}`);\n    const isCheck = item !== null;\n    return (\n      <button style={{ width: width / 5, marginLeft: width / 25, height: height * 0.05, borderRadius: width / 5, outline: 'none' }} onClick={this.onPressOnButton}>\n        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center', }}>\n          <svg height={height * 0.05} width={width / 10}>\n            <circle cx={width / 20} cy={height * 0.025} r={height * 0.015} stroke=\"black\" strokeWidth=\"1\" fill={isCheck ? color: 'transparent' }/>\n          </svg>\n          <p style={{ color, fontWeight: 'bold' }}>{name}</p>\n        </div>\n      </button>\n    )\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport { getName, getValue, getColor } from \"../utils/getValue\";\nimport { Line } from 'react-lineto';\n\nconst Tip = (props) => {\n  const { show, arrayOfValue, positionX, indexOfValue, height, positionOfTipY, indexOfChart } = props;\n\n  if (!show) {\n    return null\n  }\n  const date = new Date(getValue(indexOfChart, 0, indexOfValue));\n  return (\n    <React.Fragment>\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: positionX - 250,\n        flexDirection: 'column',\n        display: 'flex',\n        zIndex: 2,\n        width: 500,\n        pointerEvents: 'none',\n        alignItems: 'center',\n      }}>\n        <p style={{ textAlign: 'center' }}>{date.toDateString()}</p>\n        <div style={{flexDirection: 'row', display: 'flex', zIndex: 100}}>\n          {getArrayOfItems(arrayOfValue, indexOfValue, indexOfChart)}\n        </div>\n      </div>\n        <Line\n          borderWidth={2}\n          zIndex={1}\n          borderColor={'gray'}\n          x0={positionX}\n          y0={positionOfTipY}\n          x1={positionX}\n          y1={height}\n        />\n    </React.Fragment>\n\n  );\n};\n\nconst getArrayOfItems = (arrayOfValue, indexOfValue, indexOfChart) => {\n  let arrayOfItems = [];\n  arrayOfValue.forEach((item, index) => {\n    if (item === null) {\n      return\n    }\n    const color = getColor(indexOfChart, `y${index}`);\n    const newItem = (<div key={index} style={{margin: '0 10px'}}>\n      <p style={{ color, textAlign: 'center', fontWeight: 'bold' }}>{getValue(indexOfChart, index + 1, indexOfValue)}</p>\n      <p style={{ color, textAlign: 'center', fontWeight: 'bold' }}>{getName(indexOfChart, `y${index}`)}</p>\n    </div>);\n\n    arrayOfItems.push(newItem)\n  });\n\n\n  return arrayOfItems;\n};\n\nexport default Tip;\n","export const rangeForBottomBar = 100;\nexport const workHeightCoefficient = 0.7;\n","import { getLengthOfArray, getValue, getFirstValueOfArrayOfDate, getMaxValueOFArrayOfDate, getChartsQantity } from \"./getValue\";\n\nconst getMaxValueOfThisIndex = (elementIndex, data, indexOfChart) => {\n  let maxElementInRange = getValue(indexOfChart, 1, elementIndex);\n  if (data[0] === null) {\n    maxElementInRange = 0;\n  }\n\n  for (let i = 2; i <= getChartsQantity(4); i++) {\n    let value = getValue(indexOfChart, i, elementIndex);\n    if (data[i - 1] === null) {\n      value = 0;\n    }\n\n    if (value > maxElementInRange) {\n      maxElementInRange = value;\n    }\n  }\n\n  return maxElementInRange;\n};\n\nexport const getCoefficientYForBottomBar = (data, range, indexOfChart) => {\n  let coefficient = 1;\n  let maxValue = 1;\n\n    for (let elementIndex = 1; elementIndex < getLengthOfArray(4); elementIndex++) {\n      let maxElementInRange = getMaxValueOfThisIndex(elementIndex, data, indexOfChart);\n\n      if (maxValue < maxElementInRange) {\n        maxValue = maxElementInRange;\n        coefficient = checkMaxValue(maxValue, coefficient, range);\n      }\n    }\n\n  return coefficient;\n};\n\nconst checkMaxValue = (maxValue, coefficient, range) => {\n  if (maxValue > range) {\n    return calculateCoefficient(maxValue, range);\n  }\n\n  if (maxValue < range) {\n    return calculateCoefficient(maxValue, range);\n  }\n\n  return coefficient;\n};\n\nconst calculateCoefficient = (maxValue, range) => {\n  return maxValue / range;\n};\n\nexport const getCoefficientX = (data, width, indexOfChart) => {\n  let maxQuantity = 1;\n  let minValue = getFirstValueOfArrayOfDate(indexOfChart);\n  let maxValue = getMaxValueOFArrayOfDate(indexOfChart);\n  let step = 0;\n  for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n    if (data[dataIndex] === null) {\n      continue;\n    }\n    const arrayLength = getLengthOfArray(indexOfChart);\n    const newMinValue = getFirstValueOfArrayOfDate(indexOfChart);\n    const newMaxValue = getMaxValueOFArrayOfDate(indexOfChart);\n    step = getValue(indexOfChart, 0, 2) - getValue(indexOfChart, 0, 1);\n\n    if (minValue > newMinValue) {\n      minValue = newMinValue;\n    }\n\n    if (maxValue < newMaxValue ) {\n      maxValue  = newMaxValue;\n    }\n\n    if (arrayLength > maxQuantity) {\n      maxQuantity = arrayLength;\n    }\n  }\n\n  const coefficientX = (width - 20) / maxQuantity;\n\n  const stepOfValueX =  Math.floor(step) / coefficientX;\n\n  return {\n    coefficientX,\n    stepOfValueX,\n    minValue,\n    maxValue,\n  };\n};\n\n\nexport const getValueAndCoefficientYForChart = (data, minValueXOfRange, maxValueXOfRange, range, indexOfChart) => {\n  let coefficient = 1;\n  let maxValue = 1;\n\n    for (let elementIndex = 1; elementIndex < getLengthOfArray(indexOfChart); elementIndex++) {\n      const targetValue = getValue(indexOfChart, 0, elementIndex);\n      if (targetValue > maxValueXOfRange ||  targetValue < minValueXOfRange) {\n        continue;\n      }\n      let maxElementInRange = getMaxValueOfThisIndex(elementIndex, data, indexOfChart);\n\n      if (maxValue < maxElementInRange) {\n        maxValue = maxElementInRange;\n        coefficient = checkMaxValue(maxValue, coefficient, range);\n      }\n    }\n\n  return {\n    coefficient,\n    maxValue\n  };\n};\n\nexport const getCoefficientXForCharts = (width, minValueXOfRange, maxValueXOfRange, coefficientX, stepOfValueX) => {\n  return (width - 20) / Math.ceil(((maxValueXOfRange - minValueXOfRange) / stepOfValueX) / coefficientX);\n};\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Rnd } from \"react-rnd\";\n\nimport Field from './components/Field';\nimport BottomCharts from './components/BottomCharts';\nimport Charts from './components/Charts';\nimport BottomMeasure from './components/BottomMeasure';\nimport Button from './components/Button';\nimport Tip from './components/Tip';\nimport { workHeightCoefficient } from './const/constFor–°alculations';\nimport {\n  getCoefficientYForBottomBar,\n  getCoefficientX,\n  getValueAndCoefficientYForChart,\n  getCoefficientXForCharts,\n} from './utils/getCoefficient';\nimport { getValueXOfRange } from './utils/getValueOfRange';\nimport { rangeForBottomBar } from \"./const/constFor–°alculations\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nconst style = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  border: \"solid 1px #ddd\",\n  background: \"transparent\",\n  borderRadius: '5px 5px 5px 5px',\n};\n\nclass MainApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      arrayOfButton: [0, 1, 2, 3],\n      width: 200,\n      height: 200,\n      coefficientY: 1,\n      showTip: false,\n      positionOfTipX: 0,\n      positionOfTipY: 0,\n      indexValueOnTip: 0,\n      indexOfChart: 0,\n      resetAll: false,\n      limiter: {\n        x: 0,\n        y: 650,\n        width: 100,\n        height: 100,\n        isResizing: false,\n        isDragging: false,\n      },\n    };\n\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    //const { arrayOfButton } = this.state;\n\n    const indexOfChart = +match.params.index;\n    const arrayOfButton = indexOfChart !== 4 ? [0, 1] : [0, 1 ,2 ,3];\n    this.updateWindowDimensions();\n    const coefficientY = getCoefficientYForBottomBar(arrayOfButton, rangeForBottomBar, indexOfChart);\n\n    this.setState({ coefficientY, indexOfChart, arrayOfButton, resetAll: true }, () => this.setState({resetAll: false}));\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.match.params.index !== this.props.match.params.index) {\n      const { match } = nextProps;\n      const indexOfChart = +match.params.index;\n      const arrayOfButton = indexOfChart !== 4 ? [0, 1] : [0, 1 ,2 ,3];\n      const coefficientY = getCoefficientYForBottomBar(arrayOfButton, rangeForBottomBar, indexOfChart);\n      this.setState({ coefficientY, indexOfChart, arrayOfButton, resetAll: true }, () => this.setState({resetAll: false}));\n    }\n\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    const newLimiter =  { ...this.state.limiter };\n    newLimiter.y = (window.innerHeight * workHeightCoefficient) + 50;\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n      limiter: newLimiter,\n    });\n  }\n\n  handelClickOnButton = (index) => {\n    let newArray = [...this.state.arrayOfButton];\n    const targetValue = newArray[index];\n\n    if (targetValue !== null) {\n      newArray[index] = null;\n    } else {\n      newArray[index] = index;\n    }\n\n    const coefficientY = getCoefficientYForBottomBar(newArray, rangeForBottomBar, this.state.indexOfChart);\n\n    requestAnimationFrame(() => {\n      this.setState({\n        arrayOfButton: newArray,\n        coefficientY,\n      });\n    })\n  };\n\n  onDrag = (e, d) => {\n    const { limiter, width } = this.state;\n    const newLimiter = { ...limiter };\n    let newX = d.x;\n    if (newX < 0) {\n      newX = 0;\n    }\n\n    if (newX > width - limiter.width) {\n      newX = width;\n    }\n\n    newLimiter.x = newX;\n    newLimiter.y = limiter.y;\n    requestAnimationFrame(() => {\n      this.setState({\n        limiter: newLimiter,\n      },);\n    });\n  };\n\n  onResize = (e, direction, ref, delta, position) => {\n    const { limiter } = this.state;\n    const newLimiter = { ...limiter };\n\n    if (direction === 'right') {\n\n      if (e.type === 'touchmove') {\n        const { targetTouches } = e;\n        newLimiter.width = targetTouches[0].pageX - newLimiter.x;\n      } else {\n        newLimiter.width = e.x - newLimiter.x;\n      }\n\n    }\n\n    if (direction === 'left') {\n\n      if (e.type === 'touchmove') {\n        const { targetTouches } = e;\n        const oldX = newLimiter.x;\n        newLimiter.x = targetTouches[0].pageX;\n        newLimiter.width += (oldX - targetTouches[0].pageX);\n      } else {\n        const oldX = newLimiter.x;\n        newLimiter.x = e.x;\n        newLimiter.width += (oldX - e.x);\n      }\n\n    }\n\n    requestAnimationFrame(() => {\n      this.setState({\n        limiter: newLimiter,\n      });\n    });\n  };\n\n  changeStateOfTip = (state, positionOfX, index, positionOfY) => {\n    requestAnimationFrame(() => {\n      this.setState({\n        showTip: state,\n        positionOfTipX: positionOfX,\n        indexValueOnTip: index,\n        positionOfTipY: positionOfY,\n      });\n    });\n  };\n\n  render() {\n    const { width, height, limiter, coefficientY, arrayOfButton, showTip, positionOfTipX, indexValueOnTip, positionOfTipY, indexOfChart, resetAll } = this.state;\n\n    const heightWithPaddingForCharts = (height * workHeightCoefficient);\n    const { coefficientX, stepOfValueX, minValue, maxValue } = getCoefficientX(arrayOfButton, width, indexOfChart);\n    const { minValueXOfRange, maxValueXOfRange } = getValueXOfRange(limiter.x - coefficientX, limiter.width, minValue, stepOfValueX, coefficientX);\n    const {\n      coefficient: coefficientForCharts,\n      maxValue: maxValueForCharts\n    } = getValueAndCoefficientYForChart(arrayOfButton, minValueXOfRange, maxValueXOfRange, heightWithPaddingForCharts - heightWithPaddingForCharts / 6, indexOfChart );\n    const coefficientXForCharts = getCoefficientXForCharts(width, minValueXOfRange, maxValueXOfRange, coefficientX, stepOfValueX);\n\n    const heightWithPaddingForBottomBar = heightWithPaddingForCharts + 150;\n    return (\n      <div className=\"App\" style={{position: 'relative'}}>\n        <Field\n          maxValue={maxValueForCharts}\n          width={width}\n          heightGap={heightWithPaddingForCharts / 6}\n        />\n        <BottomMeasure\n          maxValue={maxValueXOfRange}\n          delta={maxValueXOfRange - minValueXOfRange}\n          step={width / 5.5}\n          stepByDtae={(maxValueXOfRange - minValueXOfRange) / 6}\n          positionByY={heightWithPaddingForCharts}\n          width={width}\n          minValue={minValueXOfRange}\n        />\n        <div style={{position: 'absolute', top: height - 50}}>\n          {\n            arrayOfButton.map((item, index) =>\n              <Button\n                key={index}\n                index={index}\n                onPress={this.handelClickOnButton}\n                width={width}\n                item={item}\n                height={height}\n              />\n            )\n          }\n        </div>\n        <Rnd\n          style={style}\n          dragAxis={'x'}\n          size={{ width: limiter.width, height: limiter.height }}\n          position={{ x: limiter.x, y: limiter.y }}\n          onDrag={this.onDrag}\n          onResize={this.onResize}\n        >\n          <div style={{ position: 'absolute', backgroundColor: 'rgba(230, 14, 14, 0.4)', top: 0, bottom: 0, left: 0, width: 10, borderRadius: '5px 0px 0px 5px'}}>\n\n          </div>\n          <div style={{ position: 'absolute', backgroundColor: 'rgba(230, 14, 14, 0.4)', top: 0, bottom: 0, right: 0, width: 10, borderRadius: '0px 5px 5px 0px' }}>\n\n          </div>\n        </Rnd>\n        <svg width={width} height={height}>\n          <BottomCharts\n            coefficientY={coefficientY}\n            coefficientX={coefficientX}\n            arrayOfItems={arrayOfButton}\n            minValue={minValue}\n            maxValue={maxValue}\n            width={width}\n            heightWithPadding={heightWithPaddingForBottomBar}\n            indexOfChart={indexOfChart}\n            resetAll={resetAll}\n          />\n          <Charts\n            coefficientY={coefficientForCharts}\n            coefficientX={coefficientXForCharts}\n            arrayOfItems={arrayOfButton}\n            minValue={minValueXOfRange}\n            maxValue={maxValueXOfRange}\n            width={width}\n            heightWithPadding={heightWithPaddingForCharts}\n            isCharts={true}\n            height={height}\n            changeStateOfTip={this.changeStateOfTip}\n            indexOfChart={indexOfChart}\n          />\n        </svg>\n        <Tip\n          show={showTip}\n          arrayOfValue={arrayOfButton}\n          positionX={positionOfTipX}\n          indexOfValue={indexValueOnTip}\n          height={height * workHeightCoefficient}\n          positionOfTipY={positionOfTipY}\n          indexOfChart={indexOfChart}\n        />\n      </div>\n    );\n  }\n}\n\nclass Main extends Component {\n  render() {\n    return (\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/chart/0\">#1</Link>\n          </li>\n          <li>\n            <Link to=\"/chart/1\">#2</Link>\n          </li>\n          <li>\n            <Link to=\"/chart/2\">#3</Link>\n          </li>\n          <li>\n            <Link to=\"/chart/3\">#4</Link>\n          </li>\n          <li>\n            <Link to=\"/chart/4\">#5</Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={'https://stro1996.github.io/telegram_contest'}>\n        <Switch>\n          <Route exact={true} path='/' component={Main}/>\n          <Route exact={true} path=\"/chart/:index\" component={MainApp} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","export const getValueXOfRange = (startPosition, range, firstValue, step, coefficientX) => {\n  const minValueXOfRange = Math.ceil(startPosition  * step ) + firstValue;\n  const maxValueXOfRange = Math.ceil((startPosition + range) * step ) + firstValue;\n\n  return {\n    minValueXOfRange,\n    maxValueXOfRange,\n  };\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}